/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_style = pgEnum(
  'enum_pages_blocks_cta_links_link_style',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_style = pgEnum(
  'enum_pages_blocks_content_columns_link_style',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['restaurants'],
)
export const enum_pages_blocks_hero_feature_title_position = pgEnum(
  'enum_pages_blocks_hero_feature_title_position',
  ['left', 'right'],
)
export const enum_pages_blocks_hero_feature_primary_content_variation = pgEnum(
  'enum_pages_blocks_hero_feature_primary_content_variation',
  ['static', 'slider'],
)
export const enum_pages_blocks_hero_feature_secondary_content_link_type = pgEnum(
  'enum_pages_blocks_hero_feature_secondary_content_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_hero_feature_secondary_content_link_style = pgEnum(
  'enum_pages_blocks_hero_feature_secondary_content_link_style',
  ['default', 'outline'],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_style = pgEnum(
  'enum__pages_v_blocks_cta_links_link_style',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_style = pgEnum(
  'enum__pages_v_blocks_content_columns_link_style',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['restaurants'],
)
export const enum__pages_v_blocks_hero_feature_title_position = pgEnum(
  'enum__pages_v_blocks_hero_feature_title_position',
  ['left', 'right'],
)
export const enum__pages_v_blocks_hero_feature_primary_content_variation = pgEnum(
  'enum__pages_v_blocks_hero_feature_primary_content_variation',
  ['static', 'slider'],
)
export const enum__pages_v_blocks_hero_feature_secondary_content_link_type = pgEnum(
  'enum__pages_v_blocks_hero_feature_secondary_content_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_hero_feature_secondary_content_link_style = pgEnum(
  'enum__pages_v_blocks_hero_feature_secondary_content_link_style',
  ['default', 'outline'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_restaurants_status = pgEnum('enum_restaurants_status', ['draft', 'published'])
export const enum__restaurants_v_version_status = pgEnum('enum__restaurants_v_version_status', [
  'draft',
  'published',
])
export const enum_restaurant_guides_status = pgEnum('enum_restaurant_guides_status', [
  'draft',
  'published',
])
export const enum__restaurant_guides_v_version_status = pgEnum(
  'enum__restaurant_guides_v_version_status',
  ['draft', 'published'],
)
export const enum_recipes_status = pgEnum('enum_recipes_status', ['draft', 'published'])
export const enum__recipes_v_version_status = pgEnum('enum__recipes_v_version_status', [
  'draft',
  'published',
])
export const enum_techniques_status = pgEnum('enum_techniques_status', ['draft', 'published'])
export const enum__techniques_v_version_status = pgEnum('enum__techniques_v_version_status', [
  'draft',
  'published',
])
export const enum_ingredients_status = pgEnum('enum_ingredients_status', ['draft', 'published'])
export const enum__ingredients_v_version_status = pgEnum('enum__ingredients_v_version_status', [
  'draft',
  'published',
])
export const enum_itineraries_status = pgEnum('enum_itineraries_status', ['draft', 'published'])
export const enum__itineraries_v_version_status = pgEnum('enum__itineraries_v_version_status', [
  'draft',
  'published',
])
export const enum_travel_guides_status = pgEnum('enum_travel_guides_status', ['draft', 'published'])
export const enum__travel_guides_v_version_status = pgEnum('enum__travel_guides_v_version_status', [
  'draft',
  'published',
])
export const enum_stories_type = pgEnum('enum_stories_type', ['restaurants', 'flavor', 'travel'])
export const enum_stories_status = pgEnum('enum_stories_status', ['draft', 'published'])
export const enum__stories_v_version_type = pgEnum('enum__stories_v_version_type', [
  'restaurants',
  'flavor',
  'travel',
])
export const enum__stories_v_version_status = pgEnum('enum__stories_v_version_status', [
  'draft',
  'published',
])
export const enum_comments_status = pgEnum('enum_comments_status', [
  'pending',
  'approved',
  'rejected',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_style: enum_pages_blocks_cta_links_link_style('link_style').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_style: enum_pages_blocks_content_columns_link_style('link_style').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('restaurants'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_hero_feature = pgTable(
  'pages_blocks_hero_feature',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    titlePosition: enum_pages_blocks_hero_feature_title_position('title_position').default('left'),
    primaryContent_variation: enum_pages_blocks_hero_feature_primary_content_variation(
      'primary_content_variation',
    ).default('static'),
    secondaryContent_title: varchar('secondary_content_title'),
    secondaryContent_link_type: enum_pages_blocks_hero_feature_secondary_content_link_type(
      'secondary_content_link_type',
    ).default('reference'),
    secondaryContent_link_newTab: boolean('secondary_content_link_new_tab'),
    secondaryContent_link_url: varchar('secondary_content_link_url'),
    secondaryContent_link_label: varchar('secondary_content_link_label'),
    secondaryContent_link_style: enum_pages_blocks_hero_feature_secondary_content_link_style(
      'secondary_content_link_style',
    ).default('default'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_hero_feature_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_hero_feature_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_hero_feature_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_hero_feature_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    restaurantsID: integer('restaurants_id'),
    'restaurant-guidesID': integer('restaurant_guides_id'),
    recipesID: integer('recipes_id'),
    techniquesID: integer('techniques_id'),
    ingredientsID: integer('ingredients_id'),
    itinerariesID: integer('itineraries_id'),
    'travel-guidesID': integer('travel_guides_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    pages_rels_restaurants_id_idx: index('pages_rels_restaurants_id_idx').on(columns.restaurantsID),
    pages_rels_restaurant_guides_id_idx: index('pages_rels_restaurant_guides_id_idx').on(
      columns['restaurant-guidesID'],
    ),
    pages_rels_recipes_id_idx: index('pages_rels_recipes_id_idx').on(columns.recipesID),
    pages_rels_techniques_id_idx: index('pages_rels_techniques_id_idx').on(columns.techniquesID),
    pages_rels_ingredients_id_idx: index('pages_rels_ingredients_id_idx').on(columns.ingredientsID),
    pages_rels_itineraries_id_idx: index('pages_rels_itineraries_id_idx').on(columns.itinerariesID),
    pages_rels_travel_guides_id_idx: index('pages_rels_travel_guides_id_idx').on(
      columns['travel-guidesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
    restaurantsIdFk: foreignKey({
      columns: [columns['restaurantsID']],
      foreignColumns: [restaurants.id],
      name: 'pages_rels_restaurants_fk',
    }).onDelete('cascade'),
    'restaurant-guidesIdFk': foreignKey({
      columns: [columns['restaurant-guidesID']],
      foreignColumns: [restaurant_guides.id],
      name: 'pages_rels_restaurant_guides_fk',
    }).onDelete('cascade'),
    recipesIdFk: foreignKey({
      columns: [columns['recipesID']],
      foreignColumns: [recipes.id],
      name: 'pages_rels_recipes_fk',
    }).onDelete('cascade'),
    techniquesIdFk: foreignKey({
      columns: [columns['techniquesID']],
      foreignColumns: [techniques.id],
      name: 'pages_rels_techniques_fk',
    }).onDelete('cascade'),
    ingredientsIdFk: foreignKey({
      columns: [columns['ingredientsID']],
      foreignColumns: [ingredients.id],
      name: 'pages_rels_ingredients_fk',
    }).onDelete('cascade'),
    itinerariesIdFk: foreignKey({
      columns: [columns['itinerariesID']],
      foreignColumns: [itineraries.id],
      name: 'pages_rels_itineraries_fk',
    }).onDelete('cascade'),
    'travel-guidesIdFk': foreignKey({
      columns: [columns['travel-guidesID']],
      foreignColumns: [travel_guides.id],
      name: 'pages_rels_travel_guides_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_style: enum__pages_v_blocks_cta_links_link_style('link_style').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_style: enum__pages_v_blocks_content_columns_link_style('link_style').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('restaurants'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_hero_feature = pgTable(
  '_pages_v_blocks_hero_feature',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    titlePosition:
      enum__pages_v_blocks_hero_feature_title_position('title_position').default('left'),
    primaryContent_variation: enum__pages_v_blocks_hero_feature_primary_content_variation(
      'primary_content_variation',
    ).default('static'),
    secondaryContent_title: varchar('secondary_content_title'),
    secondaryContent_link_type: enum__pages_v_blocks_hero_feature_secondary_content_link_type(
      'secondary_content_link_type',
    ).default('reference'),
    secondaryContent_link_newTab: boolean('secondary_content_link_new_tab'),
    secondaryContent_link_url: varchar('secondary_content_link_url'),
    secondaryContent_link_label: varchar('secondary_content_link_label'),
    secondaryContent_link_style: enum__pages_v_blocks_hero_feature_secondary_content_link_style(
      'secondary_content_link_style',
    ).default('default'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_hero_feature_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_hero_feature_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_hero_feature_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_hero_feature_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    restaurantsID: integer('restaurants_id'),
    'restaurant-guidesID': integer('restaurant_guides_id'),
    recipesID: integer('recipes_id'),
    techniquesID: integer('techniques_id'),
    ingredientsID: integer('ingredients_id'),
    itinerariesID: integer('itineraries_id'),
    'travel-guidesID': integer('travel_guides_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _pages_v_rels_restaurants_id_idx: index('_pages_v_rels_restaurants_id_idx').on(
      columns.restaurantsID,
    ),
    _pages_v_rels_restaurant_guides_id_idx: index('_pages_v_rels_restaurant_guides_id_idx').on(
      columns['restaurant-guidesID'],
    ),
    _pages_v_rels_recipes_id_idx: index('_pages_v_rels_recipes_id_idx').on(columns.recipesID),
    _pages_v_rels_techniques_id_idx: index('_pages_v_rels_techniques_id_idx').on(
      columns.techniquesID,
    ),
    _pages_v_rels_ingredients_id_idx: index('_pages_v_rels_ingredients_id_idx').on(
      columns.ingredientsID,
    ),
    _pages_v_rels_itineraries_id_idx: index('_pages_v_rels_itineraries_id_idx').on(
      columns.itinerariesID,
    ),
    _pages_v_rels_travel_guides_id_idx: index('_pages_v_rels_travel_guides_id_idx').on(
      columns['travel-guidesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
    restaurantsIdFk: foreignKey({
      columns: [columns['restaurantsID']],
      foreignColumns: [restaurants.id],
      name: '_pages_v_rels_restaurants_fk',
    }).onDelete('cascade'),
    'restaurant-guidesIdFk': foreignKey({
      columns: [columns['restaurant-guidesID']],
      foreignColumns: [restaurant_guides.id],
      name: '_pages_v_rels_restaurant_guides_fk',
    }).onDelete('cascade'),
    recipesIdFk: foreignKey({
      columns: [columns['recipesID']],
      foreignColumns: [recipes.id],
      name: '_pages_v_rels_recipes_fk',
    }).onDelete('cascade'),
    techniquesIdFk: foreignKey({
      columns: [columns['techniquesID']],
      foreignColumns: [techniques.id],
      name: '_pages_v_rels_techniques_fk',
    }).onDelete('cascade'),
    ingredientsIdFk: foreignKey({
      columns: [columns['ingredientsID']],
      foreignColumns: [ingredients.id],
      name: '_pages_v_rels_ingredients_fk',
    }).onDelete('cascade'),
    itinerariesIdFk: foreignKey({
      columns: [columns['itinerariesID']],
      foreignColumns: [itineraries.id],
      name: '_pages_v_rels_itineraries_fk',
    }).onDelete('cascade'),
    'travel-guidesIdFk': foreignKey({
      columns: [columns['travel-guidesID']],
      foreignColumns: [travel_guides.id],
      name: '_pages_v_rels_travel_guides_fk',
    }).onDelete('cascade'),
  }),
)

export const restaurants_populated_authors = pgTable(
  'restaurants_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('restaurants_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('restaurants_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [restaurants.id],
      name: 'restaurants_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const restaurants = pgTable(
  'restaurants',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    priceLevel: integer('price_level_id').references(() => price_levels.id, {
      onDelete: 'set null',
    }),
    destination: integer('destination_id').references(() => destinations.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('restaurants'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_restaurants_status('_status').default('draft'),
  },
  (columns) => ({
    restaurants_featured_image_idx: index('restaurants_featured_image_idx').on(
      columns.featuredImage,
    ),
    restaurants_meta_meta_image_idx: index('restaurants_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    restaurants_slug_idx: index('restaurants_slug_idx').on(columns.slug),
    restaurants_price_level_idx: index('restaurants_price_level_idx').on(columns.priceLevel),
    restaurants_destination_idx: index('restaurants_destination_idx').on(columns.destination),
    restaurants_collection_type_idx: index('restaurants_collection_type_idx').on(
      columns.collectionType,
    ),
    restaurants_updated_at_idx: index('restaurants_updated_at_idx').on(columns.updatedAt),
    restaurants_created_at_idx: index('restaurants_created_at_idx').on(columns.createdAt),
    restaurants__status_idx: index('restaurants__status_idx').on(columns._status),
  }),
)

export const restaurants_rels = pgTable(
  'restaurants_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    cuisinesID: integer('cuisines_id'),
    moodsID: integer('moods_id'),
  },
  (columns) => ({
    order: index('restaurants_rels_order_idx').on(columns.order),
    parentIdx: index('restaurants_rels_parent_idx').on(columns.parent),
    pathIdx: index('restaurants_rels_path_idx').on(columns.path),
    restaurants_rels_users_id_idx: index('restaurants_rels_users_id_idx').on(columns.usersID),
    restaurants_rels_cuisines_id_idx: index('restaurants_rels_cuisines_id_idx').on(
      columns.cuisinesID,
    ),
    restaurants_rels_moods_id_idx: index('restaurants_rels_moods_id_idx').on(columns.moodsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [restaurants.id],
      name: 'restaurants_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'restaurants_rels_users_fk',
    }).onDelete('cascade'),
    cuisinesIdFk: foreignKey({
      columns: [columns['cuisinesID']],
      foreignColumns: [cuisines.id],
      name: 'restaurants_rels_cuisines_fk',
    }).onDelete('cascade'),
    moodsIdFk: foreignKey({
      columns: [columns['moodsID']],
      foreignColumns: [moods.id],
      name: 'restaurants_rels_moods_fk',
    }).onDelete('cascade'),
  }),
)

export const _restaurants_v_version_populated_authors = pgTable(
  '_restaurants_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_restaurants_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_restaurants_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_restaurants_v.id],
      name: '_restaurants_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _restaurants_v = pgTable(
  '_restaurants_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => restaurants.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_priceLevel: integer('version_price_level_id').references(() => price_levels.id, {
      onDelete: 'set null',
    }),
    version_destination: integer('version_destination_id').references(() => destinations.id, {
      onDelete: 'set null',
    }),
    version_collectionType: varchar('version_collection_type').default('restaurants'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__restaurants_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _restaurants_v_parent_idx: index('_restaurants_v_parent_idx').on(columns.parent),
    _restaurants_v_version_version_featured_image_idx: index(
      '_restaurants_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _restaurants_v_version_meta_version_meta_image_idx: index(
      '_restaurants_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _restaurants_v_version_version_slug_idx: index('_restaurants_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _restaurants_v_version_version_price_level_idx: index(
      '_restaurants_v_version_version_price_level_idx',
    ).on(columns.version_priceLevel),
    _restaurants_v_version_version_destination_idx: index(
      '_restaurants_v_version_version_destination_idx',
    ).on(columns.version_destination),
    _restaurants_v_version_version_collection_type_idx: index(
      '_restaurants_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _restaurants_v_version_version_updated_at_idx: index(
      '_restaurants_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _restaurants_v_version_version_created_at_idx: index(
      '_restaurants_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _restaurants_v_version_version__status_idx: index(
      '_restaurants_v_version_version__status_idx',
    ).on(columns.version__status),
    _restaurants_v_created_at_idx: index('_restaurants_v_created_at_idx').on(columns.createdAt),
    _restaurants_v_updated_at_idx: index('_restaurants_v_updated_at_idx').on(columns.updatedAt),
    _restaurants_v_latest_idx: index('_restaurants_v_latest_idx').on(columns.latest),
    _restaurants_v_autosave_idx: index('_restaurants_v_autosave_idx').on(columns.autosave),
  }),
)

export const _restaurants_v_rels = pgTable(
  '_restaurants_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    cuisinesID: integer('cuisines_id'),
    moodsID: integer('moods_id'),
  },
  (columns) => ({
    order: index('_restaurants_v_rels_order_idx').on(columns.order),
    parentIdx: index('_restaurants_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_restaurants_v_rels_path_idx').on(columns.path),
    _restaurants_v_rels_users_id_idx: index('_restaurants_v_rels_users_id_idx').on(columns.usersID),
    _restaurants_v_rels_cuisines_id_idx: index('_restaurants_v_rels_cuisines_id_idx').on(
      columns.cuisinesID,
    ),
    _restaurants_v_rels_moods_id_idx: index('_restaurants_v_rels_moods_id_idx').on(columns.moodsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_restaurants_v.id],
      name: '_restaurants_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_restaurants_v_rels_users_fk',
    }).onDelete('cascade'),
    cuisinesIdFk: foreignKey({
      columns: [columns['cuisinesID']],
      foreignColumns: [cuisines.id],
      name: '_restaurants_v_rels_cuisines_fk',
    }).onDelete('cascade'),
    moodsIdFk: foreignKey({
      columns: [columns['moodsID']],
      foreignColumns: [moods.id],
      name: '_restaurants_v_rels_moods_fk',
    }).onDelete('cascade'),
  }),
)

export const restaurant_guides_populated_authors = pgTable(
  'restaurant_guides_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('restaurant_guides_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('restaurant_guides_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [restaurant_guides.id],
      name: 'restaurant_guides_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const restaurant_guides = pgTable(
  'restaurant_guides',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    destination: integer('destination_id').references(() => destinations.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('restaurants'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_restaurant_guides_status('_status').default('draft'),
  },
  (columns) => ({
    restaurant_guides_featured_image_idx: index('restaurant_guides_featured_image_idx').on(
      columns.featuredImage,
    ),
    restaurant_guides_meta_meta_image_idx: index('restaurant_guides_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    restaurant_guides_slug_idx: index('restaurant_guides_slug_idx').on(columns.slug),
    restaurant_guides_destination_idx: index('restaurant_guides_destination_idx').on(
      columns.destination,
    ),
    restaurant_guides_collection_type_idx: index('restaurant_guides_collection_type_idx').on(
      columns.collectionType,
    ),
    restaurant_guides_updated_at_idx: index('restaurant_guides_updated_at_idx').on(
      columns.updatedAt,
    ),
    restaurant_guides_created_at_idx: index('restaurant_guides_created_at_idx').on(
      columns.createdAt,
    ),
    restaurant_guides__status_idx: index('restaurant_guides__status_idx').on(columns._status),
  }),
)

export const restaurant_guides_rels = pgTable(
  'restaurant_guides_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    cuisinesID: integer('cuisines_id'),
    moodsID: integer('moods_id'),
  },
  (columns) => ({
    order: index('restaurant_guides_rels_order_idx').on(columns.order),
    parentIdx: index('restaurant_guides_rels_parent_idx').on(columns.parent),
    pathIdx: index('restaurant_guides_rels_path_idx').on(columns.path),
    restaurant_guides_rels_users_id_idx: index('restaurant_guides_rels_users_id_idx').on(
      columns.usersID,
    ),
    restaurant_guides_rels_cuisines_id_idx: index('restaurant_guides_rels_cuisines_id_idx').on(
      columns.cuisinesID,
    ),
    restaurant_guides_rels_moods_id_idx: index('restaurant_guides_rels_moods_id_idx').on(
      columns.moodsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [restaurant_guides.id],
      name: 'restaurant_guides_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'restaurant_guides_rels_users_fk',
    }).onDelete('cascade'),
    cuisinesIdFk: foreignKey({
      columns: [columns['cuisinesID']],
      foreignColumns: [cuisines.id],
      name: 'restaurant_guides_rels_cuisines_fk',
    }).onDelete('cascade'),
    moodsIdFk: foreignKey({
      columns: [columns['moodsID']],
      foreignColumns: [moods.id],
      name: 'restaurant_guides_rels_moods_fk',
    }).onDelete('cascade'),
  }),
)

export const _restaurant_guides_v_version_populated_authors = pgTable(
  '_restaurant_guides_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_restaurant_guides_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_restaurant_guides_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_restaurant_guides_v.id],
      name: '_restaurant_guides_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _restaurant_guides_v = pgTable(
  '_restaurant_guides_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => restaurant_guides.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_destination: integer('version_destination_id').references(() => destinations.id, {
      onDelete: 'set null',
    }),
    version_collectionType: varchar('version_collection_type').default('restaurants'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__restaurant_guides_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _restaurant_guides_v_parent_idx: index('_restaurant_guides_v_parent_idx').on(columns.parent),
    _restaurant_guides_v_version_version_featured_image_idx: index(
      '_restaurant_guides_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _restaurant_guides_v_version_meta_version_meta_image_idx: index(
      '_restaurant_guides_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _restaurant_guides_v_version_version_slug_idx: index(
      '_restaurant_guides_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _restaurant_guides_v_version_version_destination_idx: index(
      '_restaurant_guides_v_version_version_destination_idx',
    ).on(columns.version_destination),
    _restaurant_guides_v_version_version_collection_type_idx: index(
      '_restaurant_guides_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _restaurant_guides_v_version_version_updated_at_idx: index(
      '_restaurant_guides_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _restaurant_guides_v_version_version_created_at_idx: index(
      '_restaurant_guides_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _restaurant_guides_v_version_version__status_idx: index(
      '_restaurant_guides_v_version_version__status_idx',
    ).on(columns.version__status),
    _restaurant_guides_v_created_at_idx: index('_restaurant_guides_v_created_at_idx').on(
      columns.createdAt,
    ),
    _restaurant_guides_v_updated_at_idx: index('_restaurant_guides_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _restaurant_guides_v_latest_idx: index('_restaurant_guides_v_latest_idx').on(columns.latest),
    _restaurant_guides_v_autosave_idx: index('_restaurant_guides_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
)

export const _restaurant_guides_v_rels = pgTable(
  '_restaurant_guides_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    cuisinesID: integer('cuisines_id'),
    moodsID: integer('moods_id'),
  },
  (columns) => ({
    order: index('_restaurant_guides_v_rels_order_idx').on(columns.order),
    parentIdx: index('_restaurant_guides_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_restaurant_guides_v_rels_path_idx').on(columns.path),
    _restaurant_guides_v_rels_users_id_idx: index('_restaurant_guides_v_rels_users_id_idx').on(
      columns.usersID,
    ),
    _restaurant_guides_v_rels_cuisines_id_idx: index(
      '_restaurant_guides_v_rels_cuisines_id_idx',
    ).on(columns.cuisinesID),
    _restaurant_guides_v_rels_moods_id_idx: index('_restaurant_guides_v_rels_moods_id_idx').on(
      columns.moodsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_restaurant_guides_v.id],
      name: '_restaurant_guides_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_restaurant_guides_v_rels_users_fk',
    }).onDelete('cascade'),
    cuisinesIdFk: foreignKey({
      columns: [columns['cuisinesID']],
      foreignColumns: [cuisines.id],
      name: '_restaurant_guides_v_rels_cuisines_fk',
    }).onDelete('cascade'),
    moodsIdFk: foreignKey({
      columns: [columns['moodsID']],
      foreignColumns: [moods.id],
      name: '_restaurant_guides_v_rels_moods_fk',
    }).onDelete('cascade'),
  }),
)

export const price_levels = pgTable(
  'price_levels',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    price_levels_slug_idx: index('price_levels_slug_idx').on(columns.slug),
    price_levels_updated_at_idx: index('price_levels_updated_at_idx').on(columns.updatedAt),
    price_levels_created_at_idx: index('price_levels_created_at_idx').on(columns.createdAt),
  }),
)

export const cuisines = pgTable(
  'cuisines',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    cuisines_slug_idx: index('cuisines_slug_idx').on(columns.slug),
    cuisines_updated_at_idx: index('cuisines_updated_at_idx').on(columns.updatedAt),
    cuisines_created_at_idx: index('cuisines_created_at_idx').on(columns.createdAt),
  }),
)

export const moods = pgTable(
  'moods',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    moods_slug_idx: index('moods_slug_idx').on(columns.slug),
    moods_updated_at_idx: index('moods_updated_at_idx').on(columns.updatedAt),
    moods_created_at_idx: index('moods_created_at_idx').on(columns.createdAt),
  }),
)

export const destinations = pgTable(
  'destinations',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    destinations_slug_idx: index('destinations_slug_idx').on(columns.slug),
    destinations_updated_at_idx: index('destinations_updated_at_idx').on(columns.updatedAt),
    destinations_created_at_idx: index('destinations_created_at_idx').on(columns.createdAt),
  }),
)

export const recipes_populated_authors = pgTable(
  'recipes_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('recipes_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('recipes_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [recipes.id],
      name: 'recipes_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const recipes = pgTable(
  'recipes',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    difficultyLevel: integer('difficulty_level_id').references(() => difficulty_levels.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('recipes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_recipes_status('_status').default('draft'),
  },
  (columns) => ({
    recipes_featured_image_idx: index('recipes_featured_image_idx').on(columns.featuredImage),
    recipes_meta_meta_image_idx: index('recipes_meta_meta_image_idx').on(columns.meta_image),
    recipes_slug_idx: index('recipes_slug_idx').on(columns.slug),
    recipes_difficulty_level_idx: index('recipes_difficulty_level_idx').on(columns.difficultyLevel),
    recipes_collection_type_idx: index('recipes_collection_type_idx').on(columns.collectionType),
    recipes_updated_at_idx: index('recipes_updated_at_idx').on(columns.updatedAt),
    recipes_created_at_idx: index('recipes_created_at_idx').on(columns.createdAt),
    recipes__status_idx: index('recipes__status_idx').on(columns._status),
  }),
)

export const recipes_rels = pgTable(
  'recipes_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'meal-typesID': integer('meal_types_id'),
    occasionsID: integer('occasions_id'),
    dietsID: integer('diets_id'),
  },
  (columns) => ({
    order: index('recipes_rels_order_idx').on(columns.order),
    parentIdx: index('recipes_rels_parent_idx').on(columns.parent),
    pathIdx: index('recipes_rels_path_idx').on(columns.path),
    recipes_rels_users_id_idx: index('recipes_rels_users_id_idx').on(columns.usersID),
    recipes_rels_meal_types_id_idx: index('recipes_rels_meal_types_id_idx').on(
      columns['meal-typesID'],
    ),
    recipes_rels_occasions_id_idx: index('recipes_rels_occasions_id_idx').on(columns.occasionsID),
    recipes_rels_diets_id_idx: index('recipes_rels_diets_id_idx').on(columns.dietsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [recipes.id],
      name: 'recipes_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'recipes_rels_users_fk',
    }).onDelete('cascade'),
    'meal-typesIdFk': foreignKey({
      columns: [columns['meal-typesID']],
      foreignColumns: [meal_types.id],
      name: 'recipes_rels_meal_types_fk',
    }).onDelete('cascade'),
    occasionsIdFk: foreignKey({
      columns: [columns['occasionsID']],
      foreignColumns: [occasions.id],
      name: 'recipes_rels_occasions_fk',
    }).onDelete('cascade'),
    dietsIdFk: foreignKey({
      columns: [columns['dietsID']],
      foreignColumns: [diets.id],
      name: 'recipes_rels_diets_fk',
    }).onDelete('cascade'),
  }),
)

export const _recipes_v_version_populated_authors = pgTable(
  '_recipes_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_recipes_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_recipes_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_recipes_v.id],
      name: '_recipes_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _recipes_v = pgTable(
  '_recipes_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => recipes.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_difficultyLevel: integer('version_difficulty_level_id').references(
      () => difficulty_levels.id,
      {
        onDelete: 'set null',
      },
    ),
    version_collectionType: varchar('version_collection_type').default('recipes'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__recipes_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _recipes_v_parent_idx: index('_recipes_v_parent_idx').on(columns.parent),
    _recipes_v_version_version_featured_image_idx: index(
      '_recipes_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _recipes_v_version_meta_version_meta_image_idx: index(
      '_recipes_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _recipes_v_version_version_slug_idx: index('_recipes_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _recipes_v_version_version_difficulty_level_idx: index(
      '_recipes_v_version_version_difficulty_level_idx',
    ).on(columns.version_difficultyLevel),
    _recipes_v_version_version_collection_type_idx: index(
      '_recipes_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _recipes_v_version_version_updated_at_idx: index(
      '_recipes_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _recipes_v_version_version_created_at_idx: index(
      '_recipes_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _recipes_v_version_version__status_idx: index('_recipes_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _recipes_v_created_at_idx: index('_recipes_v_created_at_idx').on(columns.createdAt),
    _recipes_v_updated_at_idx: index('_recipes_v_updated_at_idx').on(columns.updatedAt),
    _recipes_v_latest_idx: index('_recipes_v_latest_idx').on(columns.latest),
    _recipes_v_autosave_idx: index('_recipes_v_autosave_idx').on(columns.autosave),
  }),
)

export const _recipes_v_rels = pgTable(
  '_recipes_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'meal-typesID': integer('meal_types_id'),
    occasionsID: integer('occasions_id'),
    dietsID: integer('diets_id'),
  },
  (columns) => ({
    order: index('_recipes_v_rels_order_idx').on(columns.order),
    parentIdx: index('_recipes_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_recipes_v_rels_path_idx').on(columns.path),
    _recipes_v_rels_users_id_idx: index('_recipes_v_rels_users_id_idx').on(columns.usersID),
    _recipes_v_rels_meal_types_id_idx: index('_recipes_v_rels_meal_types_id_idx').on(
      columns['meal-typesID'],
    ),
    _recipes_v_rels_occasions_id_idx: index('_recipes_v_rels_occasions_id_idx').on(
      columns.occasionsID,
    ),
    _recipes_v_rels_diets_id_idx: index('_recipes_v_rels_diets_id_idx').on(columns.dietsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_recipes_v.id],
      name: '_recipes_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_recipes_v_rels_users_fk',
    }).onDelete('cascade'),
    'meal-typesIdFk': foreignKey({
      columns: [columns['meal-typesID']],
      foreignColumns: [meal_types.id],
      name: '_recipes_v_rels_meal_types_fk',
    }).onDelete('cascade'),
    occasionsIdFk: foreignKey({
      columns: [columns['occasionsID']],
      foreignColumns: [occasions.id],
      name: '_recipes_v_rels_occasions_fk',
    }).onDelete('cascade'),
    dietsIdFk: foreignKey({
      columns: [columns['dietsID']],
      foreignColumns: [diets.id],
      name: '_recipes_v_rels_diets_fk',
    }).onDelete('cascade'),
  }),
)

export const techniques_populated_authors = pgTable(
  'techniques_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('techniques_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('techniques_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [techniques.id],
      name: 'techniques_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const techniques = pgTable(
  'techniques',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    difficultyLevel: integer('difficulty_level_id').references(() => difficulty_levels.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('techniques'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_techniques_status('_status').default('draft'),
  },
  (columns) => ({
    techniques_featured_image_idx: index('techniques_featured_image_idx').on(columns.featuredImage),
    techniques_meta_meta_image_idx: index('techniques_meta_meta_image_idx').on(columns.meta_image),
    techniques_slug_idx: index('techniques_slug_idx').on(columns.slug),
    techniques_difficulty_level_idx: index('techniques_difficulty_level_idx').on(
      columns.difficultyLevel,
    ),
    techniques_collection_type_idx: index('techniques_collection_type_idx').on(
      columns.collectionType,
    ),
    techniques_updated_at_idx: index('techniques_updated_at_idx').on(columns.updatedAt),
    techniques_created_at_idx: index('techniques_created_at_idx').on(columns.createdAt),
    techniques__status_idx: index('techniques__status_idx').on(columns._status),
  }),
)

export const techniques_rels = pgTable(
  'techniques_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('techniques_rels_order_idx').on(columns.order),
    parentIdx: index('techniques_rels_parent_idx').on(columns.parent),
    pathIdx: index('techniques_rels_path_idx').on(columns.path),
    techniques_rels_users_id_idx: index('techniques_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [techniques.id],
      name: 'techniques_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'techniques_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _techniques_v_version_populated_authors = pgTable(
  '_techniques_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_techniques_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_techniques_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_techniques_v.id],
      name: '_techniques_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _techniques_v = pgTable(
  '_techniques_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => techniques.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_difficultyLevel: integer('version_difficulty_level_id').references(
      () => difficulty_levels.id,
      {
        onDelete: 'set null',
      },
    ),
    version_collectionType: varchar('version_collection_type').default('techniques'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__techniques_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _techniques_v_parent_idx: index('_techniques_v_parent_idx').on(columns.parent),
    _techniques_v_version_version_featured_image_idx: index(
      '_techniques_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _techniques_v_version_meta_version_meta_image_idx: index(
      '_techniques_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _techniques_v_version_version_slug_idx: index('_techniques_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _techniques_v_version_version_difficulty_level_idx: index(
      '_techniques_v_version_version_difficulty_level_idx',
    ).on(columns.version_difficultyLevel),
    _techniques_v_version_version_collection_type_idx: index(
      '_techniques_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _techniques_v_version_version_updated_at_idx: index(
      '_techniques_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _techniques_v_version_version_created_at_idx: index(
      '_techniques_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _techniques_v_version_version__status_idx: index(
      '_techniques_v_version_version__status_idx',
    ).on(columns.version__status),
    _techniques_v_created_at_idx: index('_techniques_v_created_at_idx').on(columns.createdAt),
    _techniques_v_updated_at_idx: index('_techniques_v_updated_at_idx').on(columns.updatedAt),
    _techniques_v_latest_idx: index('_techniques_v_latest_idx').on(columns.latest),
    _techniques_v_autosave_idx: index('_techniques_v_autosave_idx').on(columns.autosave),
  }),
)

export const _techniques_v_rels = pgTable(
  '_techniques_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_techniques_v_rels_order_idx').on(columns.order),
    parentIdx: index('_techniques_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_techniques_v_rels_path_idx').on(columns.path),
    _techniques_v_rels_users_id_idx: index('_techniques_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_techniques_v.id],
      name: '_techniques_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_techniques_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const ingredients_populated_authors = pgTable(
  'ingredients_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('ingredients_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('ingredients_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ingredients.id],
      name: 'ingredients_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ingredients = pgTable(
  'ingredients',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    collectionType: varchar('collection_type').default('ingredients'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_ingredients_status('_status').default('draft'),
  },
  (columns) => ({
    ingredients_featured_image_idx: index('ingredients_featured_image_idx').on(
      columns.featuredImage,
    ),
    ingredients_meta_meta_image_idx: index('ingredients_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    ingredients_slug_idx: index('ingredients_slug_idx').on(columns.slug),
    ingredients_collection_type_idx: index('ingredients_collection_type_idx').on(
      columns.collectionType,
    ),
    ingredients_updated_at_idx: index('ingredients_updated_at_idx').on(columns.updatedAt),
    ingredients_created_at_idx: index('ingredients_created_at_idx').on(columns.createdAt),
    ingredients__status_idx: index('ingredients__status_idx').on(columns._status),
  }),
)

export const ingredients_rels = pgTable(
  'ingredients_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('ingredients_rels_order_idx').on(columns.order),
    parentIdx: index('ingredients_rels_parent_idx').on(columns.parent),
    pathIdx: index('ingredients_rels_path_idx').on(columns.path),
    ingredients_rels_users_id_idx: index('ingredients_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [ingredients.id],
      name: 'ingredients_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'ingredients_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _ingredients_v_version_populated_authors = pgTable(
  '_ingredients_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_ingredients_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_ingredients_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_ingredients_v.id],
      name: '_ingredients_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _ingredients_v = pgTable(
  '_ingredients_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => ingredients.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_collectionType: varchar('version_collection_type').default('ingredients'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__ingredients_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _ingredients_v_parent_idx: index('_ingredients_v_parent_idx').on(columns.parent),
    _ingredients_v_version_version_featured_image_idx: index(
      '_ingredients_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _ingredients_v_version_meta_version_meta_image_idx: index(
      '_ingredients_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _ingredients_v_version_version_slug_idx: index('_ingredients_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _ingredients_v_version_version_collection_type_idx: index(
      '_ingredients_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _ingredients_v_version_version_updated_at_idx: index(
      '_ingredients_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _ingredients_v_version_version_created_at_idx: index(
      '_ingredients_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _ingredients_v_version_version__status_idx: index(
      '_ingredients_v_version_version__status_idx',
    ).on(columns.version__status),
    _ingredients_v_created_at_idx: index('_ingredients_v_created_at_idx').on(columns.createdAt),
    _ingredients_v_updated_at_idx: index('_ingredients_v_updated_at_idx').on(columns.updatedAt),
    _ingredients_v_latest_idx: index('_ingredients_v_latest_idx').on(columns.latest),
    _ingredients_v_autosave_idx: index('_ingredients_v_autosave_idx').on(columns.autosave),
  }),
)

export const _ingredients_v_rels = pgTable(
  '_ingredients_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_ingredients_v_rels_order_idx').on(columns.order),
    parentIdx: index('_ingredients_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_ingredients_v_rels_path_idx').on(columns.path),
    _ingredients_v_rels_users_id_idx: index('_ingredients_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_ingredients_v.id],
      name: '_ingredients_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_ingredients_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const meal_types = pgTable(
  'meal_types',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    meal_types_slug_idx: index('meal_types_slug_idx').on(columns.slug),
    meal_types_updated_at_idx: index('meal_types_updated_at_idx').on(columns.updatedAt),
    meal_types_created_at_idx: index('meal_types_created_at_idx').on(columns.createdAt),
  }),
)

export const occasions = pgTable(
  'occasions',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    occasions_slug_idx: index('occasions_slug_idx').on(columns.slug),
    occasions_updated_at_idx: index('occasions_updated_at_idx').on(columns.updatedAt),
    occasions_created_at_idx: index('occasions_created_at_idx').on(columns.createdAt),
  }),
)

export const diets = pgTable(
  'diets',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    diets_slug_idx: index('diets_slug_idx').on(columns.slug),
    diets_updated_at_idx: index('diets_updated_at_idx').on(columns.updatedAt),
    diets_created_at_idx: index('diets_created_at_idx').on(columns.createdAt),
  }),
)

export const difficulty_levels = pgTable(
  'difficulty_levels',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    difficulty_levels_slug_idx: index('difficulty_levels_slug_idx').on(columns.slug),
    difficulty_levels_updated_at_idx: index('difficulty_levels_updated_at_idx').on(
      columns.updatedAt,
    ),
    difficulty_levels_created_at_idx: index('difficulty_levels_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const itineraries_populated_authors = pgTable(
  'itineraries_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('itineraries_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('itineraries_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [itineraries.id],
      name: 'itineraries_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const itineraries = pgTable(
  'itineraries',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    region: integer('region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    environment: integer('environment_id').references(() => environments.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('itineraries'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_itineraries_status('_status').default('draft'),
  },
  (columns) => ({
    itineraries_featured_image_idx: index('itineraries_featured_image_idx').on(
      columns.featuredImage,
    ),
    itineraries_meta_meta_image_idx: index('itineraries_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    itineraries_slug_idx: index('itineraries_slug_idx').on(columns.slug),
    itineraries_region_idx: index('itineraries_region_idx').on(columns.region),
    itineraries_environment_idx: index('itineraries_environment_idx').on(columns.environment),
    itineraries_collection_type_idx: index('itineraries_collection_type_idx').on(
      columns.collectionType,
    ),
    itineraries_updated_at_idx: index('itineraries_updated_at_idx').on(columns.updatedAt),
    itineraries_created_at_idx: index('itineraries_created_at_idx').on(columns.createdAt),
    itineraries__status_idx: index('itineraries__status_idx').on(columns._status),
  }),
)

export const itineraries_rels = pgTable(
  'itineraries_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'travel-stylesID': integer('travel_styles_id'),
  },
  (columns) => ({
    order: index('itineraries_rels_order_idx').on(columns.order),
    parentIdx: index('itineraries_rels_parent_idx').on(columns.parent),
    pathIdx: index('itineraries_rels_path_idx').on(columns.path),
    itineraries_rels_users_id_idx: index('itineraries_rels_users_id_idx').on(columns.usersID),
    itineraries_rels_travel_styles_id_idx: index('itineraries_rels_travel_styles_id_idx').on(
      columns['travel-stylesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [itineraries.id],
      name: 'itineraries_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'itineraries_rels_users_fk',
    }).onDelete('cascade'),
    'travel-stylesIdFk': foreignKey({
      columns: [columns['travel-stylesID']],
      foreignColumns: [travel_styles.id],
      name: 'itineraries_rels_travel_styles_fk',
    }).onDelete('cascade'),
  }),
)

export const _itineraries_v_version_populated_authors = pgTable(
  '_itineraries_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_itineraries_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_itineraries_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_itineraries_v.id],
      name: '_itineraries_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _itineraries_v = pgTable(
  '_itineraries_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => itineraries.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_region: integer('version_region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    version_environment: integer('version_environment_id').references(() => environments.id, {
      onDelete: 'set null',
    }),
    version_collectionType: varchar('version_collection_type').default('itineraries'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__itineraries_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _itineraries_v_parent_idx: index('_itineraries_v_parent_idx').on(columns.parent),
    _itineraries_v_version_version_featured_image_idx: index(
      '_itineraries_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _itineraries_v_version_meta_version_meta_image_idx: index(
      '_itineraries_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _itineraries_v_version_version_slug_idx: index('_itineraries_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _itineraries_v_version_version_region_idx: index(
      '_itineraries_v_version_version_region_idx',
    ).on(columns.version_region),
    _itineraries_v_version_version_environment_idx: index(
      '_itineraries_v_version_version_environment_idx',
    ).on(columns.version_environment),
    _itineraries_v_version_version_collection_type_idx: index(
      '_itineraries_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _itineraries_v_version_version_updated_at_idx: index(
      '_itineraries_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _itineraries_v_version_version_created_at_idx: index(
      '_itineraries_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _itineraries_v_version_version__status_idx: index(
      '_itineraries_v_version_version__status_idx',
    ).on(columns.version__status),
    _itineraries_v_created_at_idx: index('_itineraries_v_created_at_idx').on(columns.createdAt),
    _itineraries_v_updated_at_idx: index('_itineraries_v_updated_at_idx').on(columns.updatedAt),
    _itineraries_v_latest_idx: index('_itineraries_v_latest_idx').on(columns.latest),
    _itineraries_v_autosave_idx: index('_itineraries_v_autosave_idx').on(columns.autosave),
  }),
)

export const _itineraries_v_rels = pgTable(
  '_itineraries_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'travel-stylesID': integer('travel_styles_id'),
  },
  (columns) => ({
    order: index('_itineraries_v_rels_order_idx').on(columns.order),
    parentIdx: index('_itineraries_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_itineraries_v_rels_path_idx').on(columns.path),
    _itineraries_v_rels_users_id_idx: index('_itineraries_v_rels_users_id_idx').on(columns.usersID),
    _itineraries_v_rels_travel_styles_id_idx: index('_itineraries_v_rels_travel_styles_id_idx').on(
      columns['travel-stylesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_itineraries_v.id],
      name: '_itineraries_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_itineraries_v_rels_users_fk',
    }).onDelete('cascade'),
    'travel-stylesIdFk': foreignKey({
      columns: [columns['travel-stylesID']],
      foreignColumns: [travel_styles.id],
      name: '_itineraries_v_rels_travel_styles_fk',
    }).onDelete('cascade'),
  }),
)

export const travel_guides_populated_authors = pgTable(
  'travel_guides_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('travel_guides_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('travel_guides_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [travel_guides.id],
      name: 'travel_guides_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const travel_guides = pgTable(
  'travel_guides',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    region: integer('region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    environment: integer('environment_id').references(() => environments.id, {
      onDelete: 'set null',
    }),
    collectionType: varchar('collection_type').default('travel-guides'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_travel_guides_status('_status').default('draft'),
  },
  (columns) => ({
    travel_guides_featured_image_idx: index('travel_guides_featured_image_idx').on(
      columns.featuredImage,
    ),
    travel_guides_meta_meta_image_idx: index('travel_guides_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    travel_guides_slug_idx: index('travel_guides_slug_idx').on(columns.slug),
    travel_guides_region_idx: index('travel_guides_region_idx').on(columns.region),
    travel_guides_environment_idx: index('travel_guides_environment_idx').on(columns.environment),
    travel_guides_collection_type_idx: index('travel_guides_collection_type_idx').on(
      columns.collectionType,
    ),
    travel_guides_updated_at_idx: index('travel_guides_updated_at_idx').on(columns.updatedAt),
    travel_guides_created_at_idx: index('travel_guides_created_at_idx').on(columns.createdAt),
    travel_guides__status_idx: index('travel_guides__status_idx').on(columns._status),
  }),
)

export const travel_guides_rels = pgTable(
  'travel_guides_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'travel-stylesID': integer('travel_styles_id'),
  },
  (columns) => ({
    order: index('travel_guides_rels_order_idx').on(columns.order),
    parentIdx: index('travel_guides_rels_parent_idx').on(columns.parent),
    pathIdx: index('travel_guides_rels_path_idx').on(columns.path),
    travel_guides_rels_users_id_idx: index('travel_guides_rels_users_id_idx').on(columns.usersID),
    travel_guides_rels_travel_styles_id_idx: index('travel_guides_rels_travel_styles_id_idx').on(
      columns['travel-stylesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [travel_guides.id],
      name: 'travel_guides_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'travel_guides_rels_users_fk',
    }).onDelete('cascade'),
    'travel-stylesIdFk': foreignKey({
      columns: [columns['travel-stylesID']],
      foreignColumns: [travel_styles.id],
      name: 'travel_guides_rels_travel_styles_fk',
    }).onDelete('cascade'),
  }),
)

export const _travel_guides_v_version_populated_authors = pgTable(
  '_travel_guides_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_travel_guides_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_travel_guides_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_travel_guides_v.id],
      name: '_travel_guides_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _travel_guides_v = pgTable(
  '_travel_guides_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => travel_guides.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_region: integer('version_region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    version_environment: integer('version_environment_id').references(() => environments.id, {
      onDelete: 'set null',
    }),
    version_collectionType: varchar('version_collection_type').default('travel-guides'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__travel_guides_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _travel_guides_v_parent_idx: index('_travel_guides_v_parent_idx').on(columns.parent),
    _travel_guides_v_version_version_featured_image_idx: index(
      '_travel_guides_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _travel_guides_v_version_meta_version_meta_image_idx: index(
      '_travel_guides_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _travel_guides_v_version_version_slug_idx: index(
      '_travel_guides_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _travel_guides_v_version_version_region_idx: index(
      '_travel_guides_v_version_version_region_idx',
    ).on(columns.version_region),
    _travel_guides_v_version_version_environment_idx: index(
      '_travel_guides_v_version_version_environment_idx',
    ).on(columns.version_environment),
    _travel_guides_v_version_version_collection_type_idx: index(
      '_travel_guides_v_version_version_collection_type_idx',
    ).on(columns.version_collectionType),
    _travel_guides_v_version_version_updated_at_idx: index(
      '_travel_guides_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _travel_guides_v_version_version_created_at_idx: index(
      '_travel_guides_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _travel_guides_v_version_version__status_idx: index(
      '_travel_guides_v_version_version__status_idx',
    ).on(columns.version__status),
    _travel_guides_v_created_at_idx: index('_travel_guides_v_created_at_idx').on(columns.createdAt),
    _travel_guides_v_updated_at_idx: index('_travel_guides_v_updated_at_idx').on(columns.updatedAt),
    _travel_guides_v_latest_idx: index('_travel_guides_v_latest_idx').on(columns.latest),
    _travel_guides_v_autosave_idx: index('_travel_guides_v_autosave_idx').on(columns.autosave),
  }),
)

export const _travel_guides_v_rels = pgTable(
  '_travel_guides_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'travel-stylesID': integer('travel_styles_id'),
  },
  (columns) => ({
    order: index('_travel_guides_v_rels_order_idx').on(columns.order),
    parentIdx: index('_travel_guides_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_travel_guides_v_rels_path_idx').on(columns.path),
    _travel_guides_v_rels_users_id_idx: index('_travel_guides_v_rels_users_id_idx').on(
      columns.usersID,
    ),
    _travel_guides_v_rels_travel_styles_id_idx: index(
      '_travel_guides_v_rels_travel_styles_id_idx',
    ).on(columns['travel-stylesID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_travel_guides_v.id],
      name: '_travel_guides_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_travel_guides_v_rels_users_fk',
    }).onDelete('cascade'),
    'travel-stylesIdFk': foreignKey({
      columns: [columns['travel-stylesID']],
      foreignColumns: [travel_styles.id],
      name: '_travel_guides_v_rels_travel_styles_fk',
    }).onDelete('cascade'),
  }),
)

export const travel_styles = pgTable(
  'travel_styles',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    travel_styles_slug_idx: index('travel_styles_slug_idx').on(columns.slug),
    travel_styles_updated_at_idx: index('travel_styles_updated_at_idx').on(columns.updatedAt),
    travel_styles_created_at_idx: index('travel_styles_created_at_idx').on(columns.createdAt),
  }),
)

export const regions = pgTable(
  'regions',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    regions_slug_idx: index('regions_slug_idx').on(columns.slug),
    regions_updated_at_idx: index('regions_updated_at_idx').on(columns.updatedAt),
    regions_created_at_idx: index('regions_created_at_idx').on(columns.createdAt),
  }),
)

export const environments = pgTable(
  'environments',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    environments_slug_idx: index('environments_slug_idx').on(columns.slug),
    environments_updated_at_idx: index('environments_updated_at_idx').on(columns.updatedAt),
    environments_created_at_idx: index('environments_created_at_idx').on(columns.createdAt),
  }),
)

export const stories_populated_authors = pgTable(
  'stories_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('stories_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('stories_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [stories.id],
      name: 'stories_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const stories = pgTable(
  'stories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    type: enum_stories_type('type'),
    collectionType: varchar('collection_type').default('stories'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_stories_status('_status').default('draft'),
  },
  (columns) => ({
    stories_featured_image_idx: index('stories_featured_image_idx').on(columns.featuredImage),
    stories_meta_meta_image_idx: index('stories_meta_meta_image_idx').on(columns.meta_image),
    stories_slug_idx: index('stories_slug_idx').on(columns.slug),
    stories_updated_at_idx: index('stories_updated_at_idx').on(columns.updatedAt),
    stories_created_at_idx: index('stories_created_at_idx').on(columns.createdAt),
    stories__status_idx: index('stories__status_idx').on(columns._status),
  }),
)

export const stories_rels = pgTable(
  'stories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('stories_rels_order_idx').on(columns.order),
    parentIdx: index('stories_rels_parent_idx').on(columns.parent),
    pathIdx: index('stories_rels_path_idx').on(columns.path),
    stories_rels_users_id_idx: index('stories_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [stories.id],
      name: 'stories_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'stories_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _stories_v_version_populated_authors = pgTable(
  '_stories_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_stories_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_stories_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_stories_v.id],
      name: '_stories_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _stories_v = pgTable(
  '_stories_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => stories.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_type: enum__stories_v_version_type('version_type'),
    version_collectionType: varchar('version_collection_type').default('stories'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__stories_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _stories_v_parent_idx: index('_stories_v_parent_idx').on(columns.parent),
    _stories_v_version_version_featured_image_idx: index(
      '_stories_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _stories_v_version_meta_version_meta_image_idx: index(
      '_stories_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _stories_v_version_version_slug_idx: index('_stories_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _stories_v_version_version_updated_at_idx: index(
      '_stories_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _stories_v_version_version_created_at_idx: index(
      '_stories_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _stories_v_version_version__status_idx: index('_stories_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _stories_v_created_at_idx: index('_stories_v_created_at_idx').on(columns.createdAt),
    _stories_v_updated_at_idx: index('_stories_v_updated_at_idx').on(columns.updatedAt),
    _stories_v_latest_idx: index('_stories_v_latest_idx').on(columns.latest),
    _stories_v_autosave_idx: index('_stories_v_autosave_idx').on(columns.autosave),
  }),
)

export const _stories_v_rels = pgTable(
  '_stories_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_stories_v_rels_order_idx').on(columns.order),
    parentIdx: index('_stories_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_stories_v_rels_path_idx').on(columns.path),
    _stories_v_rels_users_id_idx: index('_stories_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_stories_v.id],
      name: '_stories_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_stories_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const comments = pgTable(
  'comments',
  {
    id: serial('id').primaryKey(),
    comment: varchar('comment'),
    rating: numeric('rating'),
    firebaseUID: varchar('firebase_u_i_d').notNull(),
    name: varchar('name').notNull(),
    adminReply: varchar('admin_reply'),
    status: enum_comments_status('status').default('pending'),
    parentId: varchar('parent_id'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    comments_updated_at_idx: index('comments_updated_at_idx').on(columns.updatedAt),
  }),
)

export const comments_rels = pgTable(
  'comments_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    restaurantsID: integer('restaurants_id'),
    'restaurant-guidesID': integer('restaurant_guides_id'),
    recipesID: integer('recipes_id'),
    techniquesID: integer('techniques_id'),
    ingredientsID: integer('ingredients_id'),
    itinerariesID: integer('itineraries_id'),
    'travel-guidesID': integer('travel_guides_id'),
  },
  (columns) => ({
    order: index('comments_rels_order_idx').on(columns.order),
    parentIdx: index('comments_rels_parent_idx').on(columns.parent),
    pathIdx: index('comments_rels_path_idx').on(columns.path),
    comments_rels_restaurants_id_idx: index('comments_rels_restaurants_id_idx').on(
      columns.restaurantsID,
    ),
    comments_rels_restaurant_guides_id_idx: index('comments_rels_restaurant_guides_id_idx').on(
      columns['restaurant-guidesID'],
    ),
    comments_rels_recipes_id_idx: index('comments_rels_recipes_id_idx').on(columns.recipesID),
    comments_rels_techniques_id_idx: index('comments_rels_techniques_id_idx').on(
      columns.techniquesID,
    ),
    comments_rels_ingredients_id_idx: index('comments_rels_ingredients_id_idx').on(
      columns.ingredientsID,
    ),
    comments_rels_itineraries_id_idx: index('comments_rels_itineraries_id_idx').on(
      columns.itinerariesID,
    ),
    comments_rels_travel_guides_id_idx: index('comments_rels_travel_guides_id_idx').on(
      columns['travel-guidesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [comments.id],
      name: 'comments_rels_parent_fk',
    }).onDelete('cascade'),
    restaurantsIdFk: foreignKey({
      columns: [columns['restaurantsID']],
      foreignColumns: [restaurants.id],
      name: 'comments_rels_restaurants_fk',
    }).onDelete('cascade'),
    'restaurant-guidesIdFk': foreignKey({
      columns: [columns['restaurant-guidesID']],
      foreignColumns: [restaurant_guides.id],
      name: 'comments_rels_restaurant_guides_fk',
    }).onDelete('cascade'),
    recipesIdFk: foreignKey({
      columns: [columns['recipesID']],
      foreignColumns: [recipes.id],
      name: 'comments_rels_recipes_fk',
    }).onDelete('cascade'),
    techniquesIdFk: foreignKey({
      columns: [columns['techniquesID']],
      foreignColumns: [techniques.id],
      name: 'comments_rels_techniques_fk',
    }).onDelete('cascade'),
    ingredientsIdFk: foreignKey({
      columns: [columns['ingredientsID']],
      foreignColumns: [ingredients.id],
      name: 'comments_rels_ingredients_fk',
    }).onDelete('cascade'),
    itinerariesIdFk: foreignKey({
      columns: [columns['itinerariesID']],
      foreignColumns: [itineraries.id],
      name: 'comments_rels_itineraries_fk',
    }).onDelete('cascade'),
    'travel-guidesIdFk': foreignKey({
      columns: [columns['travel-guidesID']],
      foreignColumns: [travel_guides.id],
      name: 'comments_rels_travel_guides_fk',
    }).onDelete('cascade'),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    restaurantsID: integer('restaurants_id'),
    'restaurant-guidesID': integer('restaurant_guides_id'),
    recipesID: integer('recipes_id'),
    techniquesID: integer('techniques_id'),
    ingredientsID: integer('ingredients_id'),
    itinerariesID: integer('itineraries_id'),
    'travel-guidesID': integer('travel_guides_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_restaurants_id_idx: index('redirects_rels_restaurants_id_idx').on(
      columns.restaurantsID,
    ),
    redirects_rels_restaurant_guides_id_idx: index('redirects_rels_restaurant_guides_id_idx').on(
      columns['restaurant-guidesID'],
    ),
    redirects_rels_recipes_id_idx: index('redirects_rels_recipes_id_idx').on(columns.recipesID),
    redirects_rels_techniques_id_idx: index('redirects_rels_techniques_id_idx').on(
      columns.techniquesID,
    ),
    redirects_rels_ingredients_id_idx: index('redirects_rels_ingredients_id_idx').on(
      columns.ingredientsID,
    ),
    redirects_rels_itineraries_id_idx: index('redirects_rels_itineraries_id_idx').on(
      columns.itinerariesID,
    ),
    redirects_rels_travel_guides_id_idx: index('redirects_rels_travel_guides_id_idx').on(
      columns['travel-guidesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    restaurantsIdFk: foreignKey({
      columns: [columns['restaurantsID']],
      foreignColumns: [restaurants.id],
      name: 'redirects_rels_restaurants_fk',
    }).onDelete('cascade'),
    'restaurant-guidesIdFk': foreignKey({
      columns: [columns['restaurant-guidesID']],
      foreignColumns: [restaurant_guides.id],
      name: 'redirects_rels_restaurant_guides_fk',
    }).onDelete('cascade'),
    recipesIdFk: foreignKey({
      columns: [columns['recipesID']],
      foreignColumns: [recipes.id],
      name: 'redirects_rels_recipes_fk',
    }).onDelete('cascade'),
    techniquesIdFk: foreignKey({
      columns: [columns['techniquesID']],
      foreignColumns: [techniques.id],
      name: 'redirects_rels_techniques_fk',
    }).onDelete('cascade'),
    ingredientsIdFk: foreignKey({
      columns: [columns['ingredientsID']],
      foreignColumns: [ingredients.id],
      name: 'redirects_rels_ingredients_fk',
    }).onDelete('cascade'),
    itinerariesIdFk: foreignKey({
      columns: [columns['itinerariesID']],
      foreignColumns: [itineraries.id],
      name: 'redirects_rels_itineraries_fk',
    }).onDelete('cascade'),
    'travel-guidesIdFk': foreignKey({
      columns: [columns['travel-guidesID']],
      foreignColumns: [travel_guides.id],
      name: 'redirects_rels_travel_guides_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You''ve received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_pages_id_idx: index('search_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'search_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    restaurantsID: integer('restaurants_id'),
    'restaurant-guidesID': integer('restaurant_guides_id'),
    'price-levelsID': integer('price_levels_id'),
    cuisinesID: integer('cuisines_id'),
    moodsID: integer('moods_id'),
    destinationsID: integer('destinations_id'),
    recipesID: integer('recipes_id'),
    techniquesID: integer('techniques_id'),
    ingredientsID: integer('ingredients_id'),
    'meal-typesID': integer('meal_types_id'),
    occasionsID: integer('occasions_id'),
    dietsID: integer('diets_id'),
    'difficulty-levelsID': integer('difficulty_levels_id'),
    itinerariesID: integer('itineraries_id'),
    'travel-guidesID': integer('travel_guides_id'),
    'travel-stylesID': integer('travel_styles_id'),
    regionsID: integer('regions_id'),
    environmentsID: integer('environments_id'),
    storiesID: integer('stories_id'),
    mediaID: integer('media_id'),
    usersID: integer('users_id'),
    commentsID: integer('comments_id'),
    categoriesID: integer('categories_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_restaurants_id_idx: index(
      'payload_locked_documents_rels_restaurants_id_idx',
    ).on(columns.restaurantsID),
    payload_locked_documents_rels_restaurant_guides_id_idx: index(
      'payload_locked_documents_rels_restaurant_guides_id_idx',
    ).on(columns['restaurant-guidesID']),
    payload_locked_documents_rels_price_levels_id_idx: index(
      'payload_locked_documents_rels_price_levels_id_idx',
    ).on(columns['price-levelsID']),
    payload_locked_documents_rels_cuisines_id_idx: index(
      'payload_locked_documents_rels_cuisines_id_idx',
    ).on(columns.cuisinesID),
    payload_locked_documents_rels_moods_id_idx: index(
      'payload_locked_documents_rels_moods_id_idx',
    ).on(columns.moodsID),
    payload_locked_documents_rels_destinations_id_idx: index(
      'payload_locked_documents_rels_destinations_id_idx',
    ).on(columns.destinationsID),
    payload_locked_documents_rels_recipes_id_idx: index(
      'payload_locked_documents_rels_recipes_id_idx',
    ).on(columns.recipesID),
    payload_locked_documents_rels_techniques_id_idx: index(
      'payload_locked_documents_rels_techniques_id_idx',
    ).on(columns.techniquesID),
    payload_locked_documents_rels_ingredients_id_idx: index(
      'payload_locked_documents_rels_ingredients_id_idx',
    ).on(columns.ingredientsID),
    payload_locked_documents_rels_meal_types_id_idx: index(
      'payload_locked_documents_rels_meal_types_id_idx',
    ).on(columns['meal-typesID']),
    payload_locked_documents_rels_occasions_id_idx: index(
      'payload_locked_documents_rels_occasions_id_idx',
    ).on(columns.occasionsID),
    payload_locked_documents_rels_diets_id_idx: index(
      'payload_locked_documents_rels_diets_id_idx',
    ).on(columns.dietsID),
    payload_locked_documents_rels_difficulty_levels_id_idx: index(
      'payload_locked_documents_rels_difficulty_levels_id_idx',
    ).on(columns['difficulty-levelsID']),
    payload_locked_documents_rels_itineraries_id_idx: index(
      'payload_locked_documents_rels_itineraries_id_idx',
    ).on(columns.itinerariesID),
    payload_locked_documents_rels_travel_guides_id_idx: index(
      'payload_locked_documents_rels_travel_guides_id_idx',
    ).on(columns['travel-guidesID']),
    payload_locked_documents_rels_travel_styles_id_idx: index(
      'payload_locked_documents_rels_travel_styles_id_idx',
    ).on(columns['travel-stylesID']),
    payload_locked_documents_rels_regions_id_idx: index(
      'payload_locked_documents_rels_regions_id_idx',
    ).on(columns.regionsID),
    payload_locked_documents_rels_environments_id_idx: index(
      'payload_locked_documents_rels_environments_id_idx',
    ).on(columns.environmentsID),
    payload_locked_documents_rels_stories_id_idx: index(
      'payload_locked_documents_rels_stories_id_idx',
    ).on(columns.storiesID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_comments_id_idx: index(
      'payload_locked_documents_rels_comments_id_idx',
    ).on(columns.commentsID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    restaurantsIdFk: foreignKey({
      columns: [columns['restaurantsID']],
      foreignColumns: [restaurants.id],
      name: 'payload_locked_documents_rels_restaurants_fk',
    }).onDelete('cascade'),
    'restaurant-guidesIdFk': foreignKey({
      columns: [columns['restaurant-guidesID']],
      foreignColumns: [restaurant_guides.id],
      name: 'payload_locked_documents_rels_restaurant_guides_fk',
    }).onDelete('cascade'),
    'price-levelsIdFk': foreignKey({
      columns: [columns['price-levelsID']],
      foreignColumns: [price_levels.id],
      name: 'payload_locked_documents_rels_price_levels_fk',
    }).onDelete('cascade'),
    cuisinesIdFk: foreignKey({
      columns: [columns['cuisinesID']],
      foreignColumns: [cuisines.id],
      name: 'payload_locked_documents_rels_cuisines_fk',
    }).onDelete('cascade'),
    moodsIdFk: foreignKey({
      columns: [columns['moodsID']],
      foreignColumns: [moods.id],
      name: 'payload_locked_documents_rels_moods_fk',
    }).onDelete('cascade'),
    destinationsIdFk: foreignKey({
      columns: [columns['destinationsID']],
      foreignColumns: [destinations.id],
      name: 'payload_locked_documents_rels_destinations_fk',
    }).onDelete('cascade'),
    recipesIdFk: foreignKey({
      columns: [columns['recipesID']],
      foreignColumns: [recipes.id],
      name: 'payload_locked_documents_rels_recipes_fk',
    }).onDelete('cascade'),
    techniquesIdFk: foreignKey({
      columns: [columns['techniquesID']],
      foreignColumns: [techniques.id],
      name: 'payload_locked_documents_rels_techniques_fk',
    }).onDelete('cascade'),
    ingredientsIdFk: foreignKey({
      columns: [columns['ingredientsID']],
      foreignColumns: [ingredients.id],
      name: 'payload_locked_documents_rels_ingredients_fk',
    }).onDelete('cascade'),
    'meal-typesIdFk': foreignKey({
      columns: [columns['meal-typesID']],
      foreignColumns: [meal_types.id],
      name: 'payload_locked_documents_rels_meal_types_fk',
    }).onDelete('cascade'),
    occasionsIdFk: foreignKey({
      columns: [columns['occasionsID']],
      foreignColumns: [occasions.id],
      name: 'payload_locked_documents_rels_occasions_fk',
    }).onDelete('cascade'),
    dietsIdFk: foreignKey({
      columns: [columns['dietsID']],
      foreignColumns: [diets.id],
      name: 'payload_locked_documents_rels_diets_fk',
    }).onDelete('cascade'),
    'difficulty-levelsIdFk': foreignKey({
      columns: [columns['difficulty-levelsID']],
      foreignColumns: [difficulty_levels.id],
      name: 'payload_locked_documents_rels_difficulty_levels_fk',
    }).onDelete('cascade'),
    itinerariesIdFk: foreignKey({
      columns: [columns['itinerariesID']],
      foreignColumns: [itineraries.id],
      name: 'payload_locked_documents_rels_itineraries_fk',
    }).onDelete('cascade'),
    'travel-guidesIdFk': foreignKey({
      columns: [columns['travel-guidesID']],
      foreignColumns: [travel_guides.id],
      name: 'payload_locked_documents_rels_travel_guides_fk',
    }).onDelete('cascade'),
    'travel-stylesIdFk': foreignKey({
      columns: [columns['travel-stylesID']],
      foreignColumns: [travel_styles.id],
      name: 'payload_locked_documents_rels_travel_styles_fk',
    }).onDelete('cascade'),
    regionsIdFk: foreignKey({
      columns: [columns['regionsID']],
      foreignColumns: [regions.id],
      name: 'payload_locked_documents_rels_regions_fk',
    }).onDelete('cascade'),
    environmentsIdFk: foreignKey({
      columns: [columns['environmentsID']],
      foreignColumns: [environments.id],
      name: 'payload_locked_documents_rels_environments_fk',
    }).onDelete('cascade'),
    storiesIdFk: foreignKey({
      columns: [columns['storiesID']],
      foreignColumns: [stories.id],
      name: 'payload_locked_documents_rels_stories_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    commentsIdFk: foreignKey({
      columns: [columns['commentsID']],
      foreignColumns: [comments.id],
      name: 'payload_locked_documents_rels_comments_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_blocks_hero_feature = relations(
  pages_blocks_hero_feature,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_hero_feature._parentID],
      references: [pages.id],
      relationName: '_blocks_hero-feature',
    }),
  }),
)
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  restaurantsID: one(restaurants, {
    fields: [pages_rels.restaurantsID],
    references: [restaurants.id],
    relationName: 'restaurants',
  }),
  'restaurant-guidesID': one(restaurant_guides, {
    fields: [pages_rels['restaurant-guidesID']],
    references: [restaurant_guides.id],
    relationName: 'restaurant-guides',
  }),
  recipesID: one(recipes, {
    fields: [pages_rels.recipesID],
    references: [recipes.id],
    relationName: 'recipes',
  }),
  techniquesID: one(techniques, {
    fields: [pages_rels.techniquesID],
    references: [techniques.id],
    relationName: 'techniques',
  }),
  ingredientsID: one(ingredients, {
    fields: [pages_rels.ingredientsID],
    references: [ingredients.id],
    relationName: 'ingredients',
  }),
  itinerariesID: one(itineraries, {
    fields: [pages_rels.itinerariesID],
    references: [itineraries.id],
    relationName: 'itineraries',
  }),
  'travel-guidesID': one(travel_guides, {
    fields: [pages_rels['travel-guidesID']],
    references: [travel_guides.id],
    relationName: 'travel-guides',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  '_blocks_hero-feature': many(pages_blocks_hero_feature, {
    relationName: '_blocks_hero-feature',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_blocks_hero_feature = relations(
  _pages_v_blocks_hero_feature,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_hero_feature._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_hero-feature',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  restaurantsID: one(restaurants, {
    fields: [_pages_v_rels.restaurantsID],
    references: [restaurants.id],
    relationName: 'restaurants',
  }),
  'restaurant-guidesID': one(restaurant_guides, {
    fields: [_pages_v_rels['restaurant-guidesID']],
    references: [restaurant_guides.id],
    relationName: 'restaurant-guides',
  }),
  recipesID: one(recipes, {
    fields: [_pages_v_rels.recipesID],
    references: [recipes.id],
    relationName: 'recipes',
  }),
  techniquesID: one(techniques, {
    fields: [_pages_v_rels.techniquesID],
    references: [techniques.id],
    relationName: 'techniques',
  }),
  ingredientsID: one(ingredients, {
    fields: [_pages_v_rels.ingredientsID],
    references: [ingredients.id],
    relationName: 'ingredients',
  }),
  itinerariesID: one(itineraries, {
    fields: [_pages_v_rels.itinerariesID],
    references: [itineraries.id],
    relationName: 'itineraries',
  }),
  'travel-guidesID': one(travel_guides, {
    fields: [_pages_v_rels['travel-guidesID']],
    references: [travel_guides.id],
    relationName: 'travel-guides',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  '_blocks_hero-feature': many(_pages_v_blocks_hero_feature, {
    relationName: '_blocks_hero-feature',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_restaurants_populated_authors = relations(
  restaurants_populated_authors,
  ({ one }) => ({
    _parentID: one(restaurants, {
      fields: [restaurants_populated_authors._parentID],
      references: [restaurants.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_restaurants_rels = relations(restaurants_rels, ({ one }) => ({
  parent: one(restaurants, {
    fields: [restaurants_rels.parent],
    references: [restaurants.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [restaurants_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  cuisinesID: one(cuisines, {
    fields: [restaurants_rels.cuisinesID],
    references: [cuisines.id],
    relationName: 'cuisines',
  }),
  moodsID: one(moods, {
    fields: [restaurants_rels.moodsID],
    references: [moods.id],
    relationName: 'moods',
  }),
}))
export const relations_restaurants = relations(restaurants, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [restaurants.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [restaurants.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(restaurants_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  priceLevel: one(price_levels, {
    fields: [restaurants.priceLevel],
    references: [price_levels.id],
    relationName: 'priceLevel',
  }),
  destination: one(destinations, {
    fields: [restaurants.destination],
    references: [destinations.id],
    relationName: 'destination',
  }),
  _rels: many(restaurants_rels, {
    relationName: '_rels',
  }),
}))
export const relations__restaurants_v_version_populated_authors = relations(
  _restaurants_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_restaurants_v, {
      fields: [_restaurants_v_version_populated_authors._parentID],
      references: [_restaurants_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__restaurants_v_rels = relations(_restaurants_v_rels, ({ one }) => ({
  parent: one(_restaurants_v, {
    fields: [_restaurants_v_rels.parent],
    references: [_restaurants_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_restaurants_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  cuisinesID: one(cuisines, {
    fields: [_restaurants_v_rels.cuisinesID],
    references: [cuisines.id],
    relationName: 'cuisines',
  }),
  moodsID: one(moods, {
    fields: [_restaurants_v_rels.moodsID],
    references: [moods.id],
    relationName: 'moods',
  }),
}))
export const relations__restaurants_v = relations(_restaurants_v, ({ one, many }) => ({
  parent: one(restaurants, {
    fields: [_restaurants_v.parent],
    references: [restaurants.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_restaurants_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_restaurants_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_restaurants_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_priceLevel: one(price_levels, {
    fields: [_restaurants_v.version_priceLevel],
    references: [price_levels.id],
    relationName: 'version_priceLevel',
  }),
  version_destination: one(destinations, {
    fields: [_restaurants_v.version_destination],
    references: [destinations.id],
    relationName: 'version_destination',
  }),
  _rels: many(_restaurants_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_restaurant_guides_populated_authors = relations(
  restaurant_guides_populated_authors,
  ({ one }) => ({
    _parentID: one(restaurant_guides, {
      fields: [restaurant_guides_populated_authors._parentID],
      references: [restaurant_guides.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_restaurant_guides_rels = relations(restaurant_guides_rels, ({ one }) => ({
  parent: one(restaurant_guides, {
    fields: [restaurant_guides_rels.parent],
    references: [restaurant_guides.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [restaurant_guides_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  cuisinesID: one(cuisines, {
    fields: [restaurant_guides_rels.cuisinesID],
    references: [cuisines.id],
    relationName: 'cuisines',
  }),
  moodsID: one(moods, {
    fields: [restaurant_guides_rels.moodsID],
    references: [moods.id],
    relationName: 'moods',
  }),
}))
export const relations_restaurant_guides = relations(restaurant_guides, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [restaurant_guides.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [restaurant_guides.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(restaurant_guides_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  destination: one(destinations, {
    fields: [restaurant_guides.destination],
    references: [destinations.id],
    relationName: 'destination',
  }),
  _rels: many(restaurant_guides_rels, {
    relationName: '_rels',
  }),
}))
export const relations__restaurant_guides_v_version_populated_authors = relations(
  _restaurant_guides_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_restaurant_guides_v, {
      fields: [_restaurant_guides_v_version_populated_authors._parentID],
      references: [_restaurant_guides_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__restaurant_guides_v_rels = relations(
  _restaurant_guides_v_rels,
  ({ one }) => ({
    parent: one(_restaurant_guides_v, {
      fields: [_restaurant_guides_v_rels.parent],
      references: [_restaurant_guides_v.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [_restaurant_guides_v_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    cuisinesID: one(cuisines, {
      fields: [_restaurant_guides_v_rels.cuisinesID],
      references: [cuisines.id],
      relationName: 'cuisines',
    }),
    moodsID: one(moods, {
      fields: [_restaurant_guides_v_rels.moodsID],
      references: [moods.id],
      relationName: 'moods',
    }),
  }),
)
export const relations__restaurant_guides_v = relations(_restaurant_guides_v, ({ one, many }) => ({
  parent: one(restaurant_guides, {
    fields: [_restaurant_guides_v.parent],
    references: [restaurant_guides.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_restaurant_guides_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_restaurant_guides_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_restaurant_guides_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_destination: one(destinations, {
    fields: [_restaurant_guides_v.version_destination],
    references: [destinations.id],
    relationName: 'version_destination',
  }),
  _rels: many(_restaurant_guides_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_price_levels = relations(price_levels, () => ({}))
export const relations_cuisines = relations(cuisines, () => ({}))
export const relations_moods = relations(moods, () => ({}))
export const relations_destinations = relations(destinations, () => ({}))
export const relations_recipes_populated_authors = relations(
  recipes_populated_authors,
  ({ one }) => ({
    _parentID: one(recipes, {
      fields: [recipes_populated_authors._parentID],
      references: [recipes.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_recipes_rels = relations(recipes_rels, ({ one }) => ({
  parent: one(recipes, {
    fields: [recipes_rels.parent],
    references: [recipes.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [recipes_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'meal-typesID': one(meal_types, {
    fields: [recipes_rels['meal-typesID']],
    references: [meal_types.id],
    relationName: 'meal-types',
  }),
  occasionsID: one(occasions, {
    fields: [recipes_rels.occasionsID],
    references: [occasions.id],
    relationName: 'occasions',
  }),
  dietsID: one(diets, {
    fields: [recipes_rels.dietsID],
    references: [diets.id],
    relationName: 'diets',
  }),
}))
export const relations_recipes = relations(recipes, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [recipes.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [recipes.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(recipes_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  difficultyLevel: one(difficulty_levels, {
    fields: [recipes.difficultyLevel],
    references: [difficulty_levels.id],
    relationName: 'difficultyLevel',
  }),
  _rels: many(recipes_rels, {
    relationName: '_rels',
  }),
}))
export const relations__recipes_v_version_populated_authors = relations(
  _recipes_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_recipes_v, {
      fields: [_recipes_v_version_populated_authors._parentID],
      references: [_recipes_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__recipes_v_rels = relations(_recipes_v_rels, ({ one }) => ({
  parent: one(_recipes_v, {
    fields: [_recipes_v_rels.parent],
    references: [_recipes_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_recipes_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'meal-typesID': one(meal_types, {
    fields: [_recipes_v_rels['meal-typesID']],
    references: [meal_types.id],
    relationName: 'meal-types',
  }),
  occasionsID: one(occasions, {
    fields: [_recipes_v_rels.occasionsID],
    references: [occasions.id],
    relationName: 'occasions',
  }),
  dietsID: one(diets, {
    fields: [_recipes_v_rels.dietsID],
    references: [diets.id],
    relationName: 'diets',
  }),
}))
export const relations__recipes_v = relations(_recipes_v, ({ one, many }) => ({
  parent: one(recipes, {
    fields: [_recipes_v.parent],
    references: [recipes.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_recipes_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_recipes_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_recipes_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_difficultyLevel: one(difficulty_levels, {
    fields: [_recipes_v.version_difficultyLevel],
    references: [difficulty_levels.id],
    relationName: 'version_difficultyLevel',
  }),
  _rels: many(_recipes_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_techniques_populated_authors = relations(
  techniques_populated_authors,
  ({ one }) => ({
    _parentID: one(techniques, {
      fields: [techniques_populated_authors._parentID],
      references: [techniques.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_techniques_rels = relations(techniques_rels, ({ one }) => ({
  parent: one(techniques, {
    fields: [techniques_rels.parent],
    references: [techniques.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [techniques_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_techniques = relations(techniques, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [techniques.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [techniques.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(techniques_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  difficultyLevel: one(difficulty_levels, {
    fields: [techniques.difficultyLevel],
    references: [difficulty_levels.id],
    relationName: 'difficultyLevel',
  }),
  _rels: many(techniques_rels, {
    relationName: '_rels',
  }),
}))
export const relations__techniques_v_version_populated_authors = relations(
  _techniques_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_techniques_v, {
      fields: [_techniques_v_version_populated_authors._parentID],
      references: [_techniques_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__techniques_v_rels = relations(_techniques_v_rels, ({ one }) => ({
  parent: one(_techniques_v, {
    fields: [_techniques_v_rels.parent],
    references: [_techniques_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_techniques_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__techniques_v = relations(_techniques_v, ({ one, many }) => ({
  parent: one(techniques, {
    fields: [_techniques_v.parent],
    references: [techniques.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_techniques_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_techniques_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_techniques_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_difficultyLevel: one(difficulty_levels, {
    fields: [_techniques_v.version_difficultyLevel],
    references: [difficulty_levels.id],
    relationName: 'version_difficultyLevel',
  }),
  _rels: many(_techniques_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_ingredients_populated_authors = relations(
  ingredients_populated_authors,
  ({ one }) => ({
    _parentID: one(ingredients, {
      fields: [ingredients_populated_authors._parentID],
      references: [ingredients.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_ingredients_rels = relations(ingredients_rels, ({ one }) => ({
  parent: one(ingredients, {
    fields: [ingredients_rels.parent],
    references: [ingredients.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [ingredients_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_ingredients = relations(ingredients, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [ingredients.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [ingredients.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(ingredients_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(ingredients_rels, {
    relationName: '_rels',
  }),
}))
export const relations__ingredients_v_version_populated_authors = relations(
  _ingredients_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_ingredients_v, {
      fields: [_ingredients_v_version_populated_authors._parentID],
      references: [_ingredients_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__ingredients_v_rels = relations(_ingredients_v_rels, ({ one }) => ({
  parent: one(_ingredients_v, {
    fields: [_ingredients_v_rels.parent],
    references: [_ingredients_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_ingredients_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__ingredients_v = relations(_ingredients_v, ({ one, many }) => ({
  parent: one(ingredients, {
    fields: [_ingredients_v.parent],
    references: [ingredients.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_ingredients_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_ingredients_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_ingredients_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_ingredients_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_meal_types = relations(meal_types, () => ({}))
export const relations_occasions = relations(occasions, () => ({}))
export const relations_diets = relations(diets, () => ({}))
export const relations_difficulty_levels = relations(difficulty_levels, () => ({}))
export const relations_itineraries_populated_authors = relations(
  itineraries_populated_authors,
  ({ one }) => ({
    _parentID: one(itineraries, {
      fields: [itineraries_populated_authors._parentID],
      references: [itineraries.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_itineraries_rels = relations(itineraries_rels, ({ one }) => ({
  parent: one(itineraries, {
    fields: [itineraries_rels.parent],
    references: [itineraries.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [itineraries_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'travel-stylesID': one(travel_styles, {
    fields: [itineraries_rels['travel-stylesID']],
    references: [travel_styles.id],
    relationName: 'travel-styles',
  }),
}))
export const relations_itineraries = relations(itineraries, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [itineraries.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [itineraries.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(itineraries_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  region: one(regions, {
    fields: [itineraries.region],
    references: [regions.id],
    relationName: 'region',
  }),
  environment: one(environments, {
    fields: [itineraries.environment],
    references: [environments.id],
    relationName: 'environment',
  }),
  _rels: many(itineraries_rels, {
    relationName: '_rels',
  }),
}))
export const relations__itineraries_v_version_populated_authors = relations(
  _itineraries_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_itineraries_v, {
      fields: [_itineraries_v_version_populated_authors._parentID],
      references: [_itineraries_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__itineraries_v_rels = relations(_itineraries_v_rels, ({ one }) => ({
  parent: one(_itineraries_v, {
    fields: [_itineraries_v_rels.parent],
    references: [_itineraries_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_itineraries_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'travel-stylesID': one(travel_styles, {
    fields: [_itineraries_v_rels['travel-stylesID']],
    references: [travel_styles.id],
    relationName: 'travel-styles',
  }),
}))
export const relations__itineraries_v = relations(_itineraries_v, ({ one, many }) => ({
  parent: one(itineraries, {
    fields: [_itineraries_v.parent],
    references: [itineraries.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_itineraries_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_itineraries_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_itineraries_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_region: one(regions, {
    fields: [_itineraries_v.version_region],
    references: [regions.id],
    relationName: 'version_region',
  }),
  version_environment: one(environments, {
    fields: [_itineraries_v.version_environment],
    references: [environments.id],
    relationName: 'version_environment',
  }),
  _rels: many(_itineraries_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_travel_guides_populated_authors = relations(
  travel_guides_populated_authors,
  ({ one }) => ({
    _parentID: one(travel_guides, {
      fields: [travel_guides_populated_authors._parentID],
      references: [travel_guides.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_travel_guides_rels = relations(travel_guides_rels, ({ one }) => ({
  parent: one(travel_guides, {
    fields: [travel_guides_rels.parent],
    references: [travel_guides.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [travel_guides_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'travel-stylesID': one(travel_styles, {
    fields: [travel_guides_rels['travel-stylesID']],
    references: [travel_styles.id],
    relationName: 'travel-styles',
  }),
}))
export const relations_travel_guides = relations(travel_guides, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [travel_guides.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [travel_guides.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(travel_guides_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  region: one(regions, {
    fields: [travel_guides.region],
    references: [regions.id],
    relationName: 'region',
  }),
  environment: one(environments, {
    fields: [travel_guides.environment],
    references: [environments.id],
    relationName: 'environment',
  }),
  _rels: many(travel_guides_rels, {
    relationName: '_rels',
  }),
}))
export const relations__travel_guides_v_version_populated_authors = relations(
  _travel_guides_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_travel_guides_v, {
      fields: [_travel_guides_v_version_populated_authors._parentID],
      references: [_travel_guides_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__travel_guides_v_rels = relations(_travel_guides_v_rels, ({ one }) => ({
  parent: one(_travel_guides_v, {
    fields: [_travel_guides_v_rels.parent],
    references: [_travel_guides_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_travel_guides_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  'travel-stylesID': one(travel_styles, {
    fields: [_travel_guides_v_rels['travel-stylesID']],
    references: [travel_styles.id],
    relationName: 'travel-styles',
  }),
}))
export const relations__travel_guides_v = relations(_travel_guides_v, ({ one, many }) => ({
  parent: one(travel_guides, {
    fields: [_travel_guides_v.parent],
    references: [travel_guides.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_travel_guides_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_travel_guides_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_travel_guides_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  version_region: one(regions, {
    fields: [_travel_guides_v.version_region],
    references: [regions.id],
    relationName: 'version_region',
  }),
  version_environment: one(environments, {
    fields: [_travel_guides_v.version_environment],
    references: [environments.id],
    relationName: 'version_environment',
  }),
  _rels: many(_travel_guides_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_travel_styles = relations(travel_styles, () => ({}))
export const relations_regions = relations(regions, () => ({}))
export const relations_environments = relations(environments, () => ({}))
export const relations_stories_populated_authors = relations(
  stories_populated_authors,
  ({ one }) => ({
    _parentID: one(stories, {
      fields: [stories_populated_authors._parentID],
      references: [stories.id],
      relationName: 'populatedAuthors',
    }),
  }),
)
export const relations_stories_rels = relations(stories_rels, ({ one }) => ({
  parent: one(stories, {
    fields: [stories_rels.parent],
    references: [stories.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [stories_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_stories = relations(stories, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [stories.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [stories.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(stories_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(stories_rels, {
    relationName: '_rels',
  }),
}))
export const relations__stories_v_version_populated_authors = relations(
  _stories_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_stories_v, {
      fields: [_stories_v_version_populated_authors._parentID],
      references: [_stories_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__stories_v_rels = relations(_stories_v_rels, ({ one }) => ({
  parent: one(_stories_v, {
    fields: [_stories_v_rels.parent],
    references: [_stories_v.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [_stories_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__stories_v = relations(_stories_v, ({ one, many }) => ({
  parent: one(stories, {
    fields: [_stories_v.parent],
    references: [stories.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_stories_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_stories_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_stories_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_stories_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_users = relations(users, () => ({}))
export const relations_comments_rels = relations(comments_rels, ({ one }) => ({
  parent: one(comments, {
    fields: [comments_rels.parent],
    references: [comments.id],
    relationName: '_rels',
  }),
  restaurantsID: one(restaurants, {
    fields: [comments_rels.restaurantsID],
    references: [restaurants.id],
    relationName: 'restaurants',
  }),
  'restaurant-guidesID': one(restaurant_guides, {
    fields: [comments_rels['restaurant-guidesID']],
    references: [restaurant_guides.id],
    relationName: 'restaurant-guides',
  }),
  recipesID: one(recipes, {
    fields: [comments_rels.recipesID],
    references: [recipes.id],
    relationName: 'recipes',
  }),
  techniquesID: one(techniques, {
    fields: [comments_rels.techniquesID],
    references: [techniques.id],
    relationName: 'techniques',
  }),
  ingredientsID: one(ingredients, {
    fields: [comments_rels.ingredientsID],
    references: [ingredients.id],
    relationName: 'ingredients',
  }),
  itinerariesID: one(itineraries, {
    fields: [comments_rels.itinerariesID],
    references: [itineraries.id],
    relationName: 'itineraries',
  }),
  'travel-guidesID': one(travel_guides, {
    fields: [comments_rels['travel-guidesID']],
    references: [travel_guides.id],
    relationName: 'travel-guides',
  }),
}))
export const relations_comments = relations(comments, ({ many }) => ({
  _rels: many(comments_rels, {
    relationName: '_rels',
  }),
}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  restaurantsID: one(restaurants, {
    fields: [redirects_rels.restaurantsID],
    references: [restaurants.id],
    relationName: 'restaurants',
  }),
  'restaurant-guidesID': one(restaurant_guides, {
    fields: [redirects_rels['restaurant-guidesID']],
    references: [restaurant_guides.id],
    relationName: 'restaurant-guides',
  }),
  recipesID: one(recipes, {
    fields: [redirects_rels.recipesID],
    references: [recipes.id],
    relationName: 'recipes',
  }),
  techniquesID: one(techniques, {
    fields: [redirects_rels.techniquesID],
    references: [techniques.id],
    relationName: 'techniques',
  }),
  ingredientsID: one(ingredients, {
    fields: [redirects_rels.ingredientsID],
    references: [ingredients.id],
    relationName: 'ingredients',
  }),
  itinerariesID: one(itineraries, {
    fields: [redirects_rels.itinerariesID],
    references: [itineraries.id],
    relationName: 'itineraries',
  }),
  'travel-guidesID': one(travel_guides, {
    fields: [redirects_rels['travel-guidesID']],
    references: [travel_guides.id],
    relationName: 'travel-guides',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [search_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    restaurantsID: one(restaurants, {
      fields: [payload_locked_documents_rels.restaurantsID],
      references: [restaurants.id],
      relationName: 'restaurants',
    }),
    'restaurant-guidesID': one(restaurant_guides, {
      fields: [payload_locked_documents_rels['restaurant-guidesID']],
      references: [restaurant_guides.id],
      relationName: 'restaurant-guides',
    }),
    'price-levelsID': one(price_levels, {
      fields: [payload_locked_documents_rels['price-levelsID']],
      references: [price_levels.id],
      relationName: 'price-levels',
    }),
    cuisinesID: one(cuisines, {
      fields: [payload_locked_documents_rels.cuisinesID],
      references: [cuisines.id],
      relationName: 'cuisines',
    }),
    moodsID: one(moods, {
      fields: [payload_locked_documents_rels.moodsID],
      references: [moods.id],
      relationName: 'moods',
    }),
    destinationsID: one(destinations, {
      fields: [payload_locked_documents_rels.destinationsID],
      references: [destinations.id],
      relationName: 'destinations',
    }),
    recipesID: one(recipes, {
      fields: [payload_locked_documents_rels.recipesID],
      references: [recipes.id],
      relationName: 'recipes',
    }),
    techniquesID: one(techniques, {
      fields: [payload_locked_documents_rels.techniquesID],
      references: [techniques.id],
      relationName: 'techniques',
    }),
    ingredientsID: one(ingredients, {
      fields: [payload_locked_documents_rels.ingredientsID],
      references: [ingredients.id],
      relationName: 'ingredients',
    }),
    'meal-typesID': one(meal_types, {
      fields: [payload_locked_documents_rels['meal-typesID']],
      references: [meal_types.id],
      relationName: 'meal-types',
    }),
    occasionsID: one(occasions, {
      fields: [payload_locked_documents_rels.occasionsID],
      references: [occasions.id],
      relationName: 'occasions',
    }),
    dietsID: one(diets, {
      fields: [payload_locked_documents_rels.dietsID],
      references: [diets.id],
      relationName: 'diets',
    }),
    'difficulty-levelsID': one(difficulty_levels, {
      fields: [payload_locked_documents_rels['difficulty-levelsID']],
      references: [difficulty_levels.id],
      relationName: 'difficulty-levels',
    }),
    itinerariesID: one(itineraries, {
      fields: [payload_locked_documents_rels.itinerariesID],
      references: [itineraries.id],
      relationName: 'itineraries',
    }),
    'travel-guidesID': one(travel_guides, {
      fields: [payload_locked_documents_rels['travel-guidesID']],
      references: [travel_guides.id],
      relationName: 'travel-guides',
    }),
    'travel-stylesID': one(travel_styles, {
      fields: [payload_locked_documents_rels['travel-stylesID']],
      references: [travel_styles.id],
      relationName: 'travel-styles',
    }),
    regionsID: one(regions, {
      fields: [payload_locked_documents_rels.regionsID],
      references: [regions.id],
      relationName: 'regions',
    }),
    environmentsID: one(environments, {
      fields: [payload_locked_documents_rels.environmentsID],
      references: [environments.id],
      relationName: 'environments',
    }),
    storiesID: one(stories, {
      fields: [payload_locked_documents_rels.storiesID],
      references: [stories.id],
      relationName: 'stories',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    commentsID: one(comments, {
      fields: [payload_locked_documents_rels.commentsID],
      references: [comments.id],
      relationName: 'comments',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_style: typeof enum_pages_blocks_cta_links_link_style
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_style: typeof enum_pages_blocks_content_columns_link_style
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_blocks_hero_feature_title_position: typeof enum_pages_blocks_hero_feature_title_position
  enum_pages_blocks_hero_feature_primary_content_variation: typeof enum_pages_blocks_hero_feature_primary_content_variation
  enum_pages_blocks_hero_feature_secondary_content_link_type: typeof enum_pages_blocks_hero_feature_secondary_content_link_type
  enum_pages_blocks_hero_feature_secondary_content_link_style: typeof enum_pages_blocks_hero_feature_secondary_content_link_style
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_style: typeof enum__pages_v_blocks_cta_links_link_style
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_style: typeof enum__pages_v_blocks_content_columns_link_style
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_blocks_hero_feature_title_position: typeof enum__pages_v_blocks_hero_feature_title_position
  enum__pages_v_blocks_hero_feature_primary_content_variation: typeof enum__pages_v_blocks_hero_feature_primary_content_variation
  enum__pages_v_blocks_hero_feature_secondary_content_link_type: typeof enum__pages_v_blocks_hero_feature_secondary_content_link_type
  enum__pages_v_blocks_hero_feature_secondary_content_link_style: typeof enum__pages_v_blocks_hero_feature_secondary_content_link_style
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_restaurants_status: typeof enum_restaurants_status
  enum__restaurants_v_version_status: typeof enum__restaurants_v_version_status
  enum_restaurant_guides_status: typeof enum_restaurant_guides_status
  enum__restaurant_guides_v_version_status: typeof enum__restaurant_guides_v_version_status
  enum_recipes_status: typeof enum_recipes_status
  enum__recipes_v_version_status: typeof enum__recipes_v_version_status
  enum_techniques_status: typeof enum_techniques_status
  enum__techniques_v_version_status: typeof enum__techniques_v_version_status
  enum_ingredients_status: typeof enum_ingredients_status
  enum__ingredients_v_version_status: typeof enum__ingredients_v_version_status
  enum_itineraries_status: typeof enum_itineraries_status
  enum__itineraries_v_version_status: typeof enum__itineraries_v_version_status
  enum_travel_guides_status: typeof enum_travel_guides_status
  enum__travel_guides_v_version_status: typeof enum__travel_guides_v_version_status
  enum_stories_type: typeof enum_stories_type
  enum_stories_status: typeof enum_stories_status
  enum__stories_v_version_type: typeof enum__stories_v_version_type
  enum__stories_v_version_status: typeof enum__stories_v_version_status
  enum_comments_status: typeof enum_comments_status
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages_blocks_hero_feature: typeof pages_blocks_hero_feature
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v_blocks_hero_feature: typeof _pages_v_blocks_hero_feature
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  restaurants_populated_authors: typeof restaurants_populated_authors
  restaurants: typeof restaurants
  restaurants_rels: typeof restaurants_rels
  _restaurants_v_version_populated_authors: typeof _restaurants_v_version_populated_authors
  _restaurants_v: typeof _restaurants_v
  _restaurants_v_rels: typeof _restaurants_v_rels
  restaurant_guides_populated_authors: typeof restaurant_guides_populated_authors
  restaurant_guides: typeof restaurant_guides
  restaurant_guides_rels: typeof restaurant_guides_rels
  _restaurant_guides_v_version_populated_authors: typeof _restaurant_guides_v_version_populated_authors
  _restaurant_guides_v: typeof _restaurant_guides_v
  _restaurant_guides_v_rels: typeof _restaurant_guides_v_rels
  price_levels: typeof price_levels
  cuisines: typeof cuisines
  moods: typeof moods
  destinations: typeof destinations
  recipes_populated_authors: typeof recipes_populated_authors
  recipes: typeof recipes
  recipes_rels: typeof recipes_rels
  _recipes_v_version_populated_authors: typeof _recipes_v_version_populated_authors
  _recipes_v: typeof _recipes_v
  _recipes_v_rels: typeof _recipes_v_rels
  techniques_populated_authors: typeof techniques_populated_authors
  techniques: typeof techniques
  techniques_rels: typeof techniques_rels
  _techniques_v_version_populated_authors: typeof _techniques_v_version_populated_authors
  _techniques_v: typeof _techniques_v
  _techniques_v_rels: typeof _techniques_v_rels
  ingredients_populated_authors: typeof ingredients_populated_authors
  ingredients: typeof ingredients
  ingredients_rels: typeof ingredients_rels
  _ingredients_v_version_populated_authors: typeof _ingredients_v_version_populated_authors
  _ingredients_v: typeof _ingredients_v
  _ingredients_v_rels: typeof _ingredients_v_rels
  meal_types: typeof meal_types
  occasions: typeof occasions
  diets: typeof diets
  difficulty_levels: typeof difficulty_levels
  itineraries_populated_authors: typeof itineraries_populated_authors
  itineraries: typeof itineraries
  itineraries_rels: typeof itineraries_rels
  _itineraries_v_version_populated_authors: typeof _itineraries_v_version_populated_authors
  _itineraries_v: typeof _itineraries_v
  _itineraries_v_rels: typeof _itineraries_v_rels
  travel_guides_populated_authors: typeof travel_guides_populated_authors
  travel_guides: typeof travel_guides
  travel_guides_rels: typeof travel_guides_rels
  _travel_guides_v_version_populated_authors: typeof _travel_guides_v_version_populated_authors
  _travel_guides_v: typeof _travel_guides_v
  _travel_guides_v_rels: typeof _travel_guides_v_rels
  travel_styles: typeof travel_styles
  regions: typeof regions
  environments: typeof environments
  stories_populated_authors: typeof stories_populated_authors
  stories: typeof stories
  stories_rels: typeof stories_rels
  _stories_v_version_populated_authors: typeof _stories_v_version_populated_authors
  _stories_v: typeof _stories_v
  _stories_v_rels: typeof _stories_v_rels
  media: typeof media
  users: typeof users
  comments: typeof comments
  comments_rels: typeof comments_rels
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_blocks_hero_feature: typeof relations_pages_blocks_hero_feature
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_blocks_hero_feature: typeof relations__pages_v_blocks_hero_feature
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_restaurants_populated_authors: typeof relations_restaurants_populated_authors
  relations_restaurants_rels: typeof relations_restaurants_rels
  relations_restaurants: typeof relations_restaurants
  relations__restaurants_v_version_populated_authors: typeof relations__restaurants_v_version_populated_authors
  relations__restaurants_v_rels: typeof relations__restaurants_v_rels
  relations__restaurants_v: typeof relations__restaurants_v
  relations_restaurant_guides_populated_authors: typeof relations_restaurant_guides_populated_authors
  relations_restaurant_guides_rels: typeof relations_restaurant_guides_rels
  relations_restaurant_guides: typeof relations_restaurant_guides
  relations__restaurant_guides_v_version_populated_authors: typeof relations__restaurant_guides_v_version_populated_authors
  relations__restaurant_guides_v_rels: typeof relations__restaurant_guides_v_rels
  relations__restaurant_guides_v: typeof relations__restaurant_guides_v
  relations_price_levels: typeof relations_price_levels
  relations_cuisines: typeof relations_cuisines
  relations_moods: typeof relations_moods
  relations_destinations: typeof relations_destinations
  relations_recipes_populated_authors: typeof relations_recipes_populated_authors
  relations_recipes_rels: typeof relations_recipes_rels
  relations_recipes: typeof relations_recipes
  relations__recipes_v_version_populated_authors: typeof relations__recipes_v_version_populated_authors
  relations__recipes_v_rels: typeof relations__recipes_v_rels
  relations__recipes_v: typeof relations__recipes_v
  relations_techniques_populated_authors: typeof relations_techniques_populated_authors
  relations_techniques_rels: typeof relations_techniques_rels
  relations_techniques: typeof relations_techniques
  relations__techniques_v_version_populated_authors: typeof relations__techniques_v_version_populated_authors
  relations__techniques_v_rels: typeof relations__techniques_v_rels
  relations__techniques_v: typeof relations__techniques_v
  relations_ingredients_populated_authors: typeof relations_ingredients_populated_authors
  relations_ingredients_rels: typeof relations_ingredients_rels
  relations_ingredients: typeof relations_ingredients
  relations__ingredients_v_version_populated_authors: typeof relations__ingredients_v_version_populated_authors
  relations__ingredients_v_rels: typeof relations__ingredients_v_rels
  relations__ingredients_v: typeof relations__ingredients_v
  relations_meal_types: typeof relations_meal_types
  relations_occasions: typeof relations_occasions
  relations_diets: typeof relations_diets
  relations_difficulty_levels: typeof relations_difficulty_levels
  relations_itineraries_populated_authors: typeof relations_itineraries_populated_authors
  relations_itineraries_rels: typeof relations_itineraries_rels
  relations_itineraries: typeof relations_itineraries
  relations__itineraries_v_version_populated_authors: typeof relations__itineraries_v_version_populated_authors
  relations__itineraries_v_rels: typeof relations__itineraries_v_rels
  relations__itineraries_v: typeof relations__itineraries_v
  relations_travel_guides_populated_authors: typeof relations_travel_guides_populated_authors
  relations_travel_guides_rels: typeof relations_travel_guides_rels
  relations_travel_guides: typeof relations_travel_guides
  relations__travel_guides_v_version_populated_authors: typeof relations__travel_guides_v_version_populated_authors
  relations__travel_guides_v_rels: typeof relations__travel_guides_v_rels
  relations__travel_guides_v: typeof relations__travel_guides_v
  relations_travel_styles: typeof relations_travel_styles
  relations_regions: typeof relations_regions
  relations_environments: typeof relations_environments
  relations_stories_populated_authors: typeof relations_stories_populated_authors
  relations_stories_rels: typeof relations_stories_rels
  relations_stories: typeof relations_stories
  relations__stories_v_version_populated_authors: typeof relations__stories_v_version_populated_authors
  relations__stories_v_rels: typeof relations__stories_v_rels
  relations__stories_v: typeof relations__stories_v
  relations_media: typeof relations_media
  relations_users: typeof relations_users
  relations_comments_rels: typeof relations_comments_rels
  relations_comments: typeof relations_comments
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-vercel-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
